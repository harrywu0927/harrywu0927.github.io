[{"content":"","date":null,"permalink":"/ja/","section":"Haruru","summary":"","title":"Haruru"},{"content":"","date":null,"permalink":"/ja/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"Clash コアのダウンロード #Clash は Go 言語で開発された汎用プロキシクライアントのコアであり、vmess、vless、trojan、shadowsocks、socks、http など複数のプロトコルに対応しています。 GUI は付属せず、コアのロジックだけを実行するため、設定ファイルや Clash Verge、Meta UI、Yacd などのコントロールパネルと併用して使用します。\nClash のオリジナル版および Premium 版はすでに開発停止しており、元の Meta 版は現在 mihomo に改名されています。\n# Clash.Meta の最新バージョンをダウンロード（Linux amd64） wget https://github.com/MetaCubeX/mihomo/releases/download/v1.19.10/mihomo-linux-amd64-v1.19.10.gz -O clash.meta.gz gunzip clash.meta.gz chmod +x clash.meta 設定ファイル config.yaml を準備 #通常、プロキシサービス（通称「空港」）から提供されるサブスクリプションリンクを使用して Clash 用設定ファイルに変換する必要があります。\n方法 A：手動ダウンロード 多くのサービスでは Clash 用 YAML 設定ファイルのダウンロードリンクが提供されます。 ダウンロード後、config.yaml にリネームします。 例：SpeedCat 空港の変換済みサブスクリプションを利用：\nwget -O config.yaml [あなたのサブスクリプションURL] 方法 B：Subconverter を使用 以下のような形式で生成可能： https://subconverter.yourdomain.com/sub?target=clash\u0026amp;url=あなたのリンク\u0026amp;udp=true なぜ変換が必要？ 各プロキシクライアント（Clash、Surge、Shadowrocket、V2RayN など）は異なる設定形式を使用します。サブスクリプションリンクで提供される元のデータ（ss://、vmess:// 等）は一般形式のため、クライアントに合った形式に変換する必要があります。\nclash.meta を実行 #./clash.meta 初回実行時に以下のようなエラーが出る場合があります：\nERRO can\u0026#39;t initial GeoIP: can\u0026#39;t download MMDB: context deadline exceeded FATA Parse config error: rules[...] [GEOIP,CN,DIRECT] error: can\u0026#39;t download MMDB: context deadline exceeded これは Clash が GeoIP データ（MaxMind の Country.mmdb など）のダウンロードに失敗したためです。\nGEOIP は国コードに基づき IP を振り分けます。例：GEOIP,CN,DIRECT は中国の IP に直接接続を指示します。\n対処方法：\n方法1：CDN またはプロキシ経由で手動ダウンロード wget https://cdn.jsdelivr.net/gh/Dreamacro/maxmind-geoip@release/Country.mmdb -O Country.mmdb config.yaml と同じディレクトリに配置してください。\n方法2：一時的に GEOIP 行をすべてコメントアウト 初回実行時にネットワークアクセスがなければ GeoIP ダウンロードができません。 まずコメントアウトして起動し、プロキシが動作したら再度有効化して再実行すれば OK です。\n正常に起動すると以下のようなログが表示されます：\nINFO[...] 初期設定が完了しました、所要時間: XXms プロキシのテスト #グローバルシステムプロキシを設定（Ubuntu 22） #sudo vi /etc/environment 以下を追加：\nhttp_proxy=\u0026#34;http://127.0.0.1:7890\u0026#34; https_proxy=\u0026#34;http://127.0.0.1:7890\u0026#34; 反映：\nsource /etc/environment 動作確認 #curl --proxy http://127.0.0.1:7890 https://api.ipify.org システムサービス化 #clash ユーザーを作成 #sudo useradd -r -s /usr/sbin/nologin clash sudo chown -R clash:clash /opt/clash 専用ユーザーを作成する理由 最小権限の原則（必要な最小限の権限だけを付与） 他ユーザーや root との干渉を避ける systemd サービスファイルを作成 #sudo vi /etc/systemd/system/clash.service 以下を入力：\n[Unit] Description=Clash Meta Service After=network.target [Service] Type=simple User=clash WorkingDirectory=/opt/clash ExecStart=/opt/clash/clash.meta -d . Restart=on-failure LimitNOFILE=1048576 [Install] WantedBy=multi-user.target 実行ファイルを配置 #sudo cp * /opt/clash サービス起動 #sudo systemctl daemon-reexec sudo systemctl daemon-reload sudo systemctl enable clash sudo systemctl start clash ログ確認 #sudo systemctl status clash journalctl -u clash -f サブスクリプションの自動更新 #更新スクリプト作成 #sudo vi /opt/clash/update-clash.sh 以下の内容を追加：\n#!/bin/bash CLASH_DIR=\u0026#34;/opt/clash\u0026#34; SUB_URL=\u0026#34;[あなたのサブスクリプションURL]\u0026#34; CONFIG_FILE=\u0026#34;$CLASH_DIR/config.yaml\u0026#34; BACKUP_FILE=\u0026#34;$CLASH_DIR/config.yaml.bak\u0026#34; TMP_FILE=\u0026#34;$CLASH_DIR/config.tmp.yaml\u0026#34; echo \u0026#34;設定をダウンロード中...\u0026#34; if curl -fsSL \u0026#34;$SUB_URL\u0026#34; -o \u0026#34;$TMP_FILE\u0026#34;; then cp \u0026#34;$CONFIG_FILE\u0026#34; \u0026#34;$BACKUP_FILE\u0026#34; mv \u0026#34;$TMP_FILE\u0026#34; \u0026#34;$CONFIG_FILE\u0026#34; echo \u0026#34;更新成功、Clash を再起動します...\u0026#34; systemctl restart clash else echo \u0026#34;ダウンロード失敗、旧設定を復元します\u0026#34; fi 実行権限を付与：\nsudo chmod +x /opt/clash/update-clash.sh Cron に登録 #sudo crontab -e 以下を追加（毎日午前3時に更新）：\n0 3 * * * /opt/clash/update-clash.sh \u0026gt;\u0026gt; /opt/clash/update.log 2\u0026gt;\u0026amp;1 Web UI の設定 #事前にビルドされた UI を直接取得し、現在のディレクトリ（/opt/clash/ui）に保存します:\ngit clone https://github.com/metacubex/metacubexd.git -b gh-pages ./ui config.yaml の編集 #config.yaml ファイルで、external-ui フィールドを編集します:\nexternal-controller: 127.0.0.1:9090 # ローカルネットワークへのアクセスを許可する場合は 0.0.0.0:9090 にバインド external-ui: ui secret: 「yourpassword」 # 任意のパスワードを設定可能 Clash を再起動：\nsudo systemctl restart clash ブラウザでアクセス：http://localhost:9090/ui/\nUI の更新を取得：\nsudo git -C /opt/clash/ui pull -r 自動更新サブスクリプションスクリプトの更新 #サブスクリプションを更新するたびに現在の config.yaml が上書きされるため、update-clash.sh に以下のコードを追加する必要があります： 1#!/bin/bash 2 3CLASH_DIR=\u0026#34;/opt/clash\u0026#34; 4SUB_URL=\u0026#34;[あなたのサブスクリプションリンク]\u0026#34; 5CONFIG_FILE=\u0026#34;$CLASH_DIR/config.yaml\u0026#34; 6BACKUP_FILE=「$CLASH_DIR/config.yaml.bak」 7TMP_FILE=\u0026#34;$CLASH_DIR/config.tmp.yaml\u0026#34; 8 9# Web UI の更新を取得 10git -C /opt/clash/ui pull -r 11 12echo 「Clash 設定のサブスクリプションをダウンロード中...」 13if curl -fsSL 「$SUB_URL」 -o 「$TMP_FILE」; then 14 # バックアップを作成 15 cp 「$CONFIG_FILE」 「$BACKUP_FILE」 16 mv 「$TMP_FILE」 「$CONFIG_FILE」 17 18 # 設定を確認し追加 19 sed -i 『0,/^[[:space:]]*.*external-ui:/s|^\\([[:space:]]*\\).*external-ui:.*|\\1external-ui: ui|』 「$CONFIG_FILE」 20 21 sed -i \u0026#34;0,/^[[:space:]]*.*external-controller:/s|^\\([[:space:]]*\\). *external-controller:.*|\\1external-controller: 『0.0.0.0:9090』|「 」$CONFIG_FILE\u0026#34; 22 23 24 if grep -q 「^secret:」 「$CONFIG_FILE」; then 25 # 既存の secret を置き換え 26 sed -i \u0026#39;s/^secret:. */secret: 「mypasswd」/\u0026#39; 「$CONFIG_FILE」 27 else 28 # 存在しない場合は追加 29 echo 『secret: 「mypasswd」』 \u0026gt;\u0026gt; 「$CONFIG_FILE」 30 fi 31 32 echo 「設定更新成功、Clash サービスを再起動中...」 33 sudo systemctl restart clash 34else 35 echo 「ダウンロード失敗、旧設定を復元」 36fi\n","date":"10 6月 2025","permalink":"/ja/posts/clash-setup/","section":"Posts","summary":"","title":"Ubuntu で Clash.Meta をデプロイし、システムサービス化とサブスクリプション自動更新を設定する"},{"content":"こんにちわ #","date":null,"permalink":"/ja/about/","section":"Haruru","summary":"","title":""},{"content":"","date":null,"permalink":"/ja/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/ja/tags/","section":"Tags","summary":"","title":"Tags"}]